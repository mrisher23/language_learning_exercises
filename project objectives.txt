1. Hello World

Write a self contained program that can be executed from the command line. The program should output the string "Hello World" to the standard output channel. Introduce the basic structure and formatting of the language.

Input: None
Output: "Hello World"


2. Comments

The execution of the program is not critical, but it should be able to compile and run. Demonstrate
Single and multi-line comments and commenting of different types of code elements. No need to demonstrate the API automated documentation covered by #13

Input: None
Output: None


3. Variables

Demonstrate instantiating each of the supported native variable types of the language. Some types may
have more than one way to instantiate, so it should demonstrate as appropriate. Introduce the concept of scope as applies to the language. Include a demonstration of a constant. Introduce any concept of global variables.

Input: None
Output: Variable name, type, and value


4. Mathematical Operations

Instantiate multiple numerical variable types and perform basic mathematical operations: addition, subtraction, multiplication, division, modulus, and bit shifts.

Input: None
Output: Reference to mathematical operation and the result


5. Conditionals + Logical Operators

Demonstrate simple logical conditional execution. Demonstrate compound logical tests. Demonstrated nested conditional statements. Demonstrate if/else conditionals. Demonstrate serial conditionals and/or switch statements.

Input: None
Output: Print statements that demonstrate conditional evaluations and their results


6. Type Conversion

Demonstrate converting each of the data types into any of the acceptable other types.

Input: None
Output: Standard out statements that show the original value and the value after convertion


7. Arrays

Construct an array of any data type. Construct one of a fixed size and one using a variable. Construct a multi-dimensional array.

8. Loops
9. Function
10. Recursive Functions
11. Accepting command-line arguments (no libraries)
12. Accessing Environment & Global Variables
13. Project / Code Organization
14. Import Libraries
15. Automated API documentation
16. Logging
17. Exception Handling
18. Read and Write a File
19. Accept Command Line args via Library
20. Random
21. Interactive User IO via STDIN / STDOUT
22. Formatted Output
23. String Parsing

Concatenate, split, find, matche a pattern (regex), to upper, to lower


24. Advanced String Parsing (YAML, JSON, XML, CSV, properties, BASE64, Hex)
25. Sorting (Manual Implementation)
26. Sorting (Built-in or Library provided)
27. Time
28. Create Simple Custom Object (e.g. Struct)
29. Enumeration type
30. Create Object with behaviors
31. Package Project
32. Object to String
33. Comparing Custom Objects (e.g. sorting and equality)
34. Simple Inheritance
35. Complex Inheritance

Multiple Inheritance. Final classes. Final methods.


36. Reading Configuration File / Resource File
37. Threading
38. Make a database connection
39. Make a HTTP connection
40. Make a HTTP connection with 1-way SSL
41. Make a HTTP connection with 2-way SSL
42. Make a simple UI application
43. Create a REST interface
44. Working with large numbers
45. Symmetric Encryption (via library)
46. Asymmetric Encryption (via library)


