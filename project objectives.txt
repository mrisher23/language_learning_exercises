1. Hello World

Write a self contained program that can be executed from the command line. The program should output the string "Hello World" to the standard output channel. Introduce the basic structure and formatting of the language.

Input: None
Output: "Hello World"


2. Comments

The execution of the program is not critical, but it should be able to compile and run. Demonstrate
Single and multi-line comments and commenting of different types of code elements. No need to demonstrate the API automated documentation covered by #13

Input: None
Output: None


3. Variables

Demonstrate instantiating each of the supported native variable types of the language. Some types may
have more than one way to instantiate, so it should demonstrate as appropriate. Introduce the concept of scope as applies to the language. Include a demonstration of a constant. Introduce any concept of global variables.

Input: None
Output: Variable name, type, and value


4. Mathematical Operations

Instantiate multiple numerical variable types and perform basic mathematical operations: addition, subtraction, multiplication, division, modulus, and bit shifts.

Input: None
Output: Reference to mathematical operation and the result


5. Conditionals + Logical Operators

Demonstrate simple logical conditional execution. Demonstrate compound logical tests. Demonstrated nested conditional statements. Demonstrate if/else conditionals. Demonstrate serial conditionals and/or switch statements.

Input: None
Output: Print statements that demonstrate conditional evaluations and their results


6. Type Conversion

Convert the basic data types of the language between other basic types where it makes sense.
Numerical, boolean, string, etc as supported by the language. Comment any possible pitfalls of the type conversion.

Input: None
Output: None


7. Arrays

Create array of basic data type(s). Create both using literal size and dynamic size. Discuss indexing, accessing elements, assigning elements, demonstrate output of contents (if can be done without loops).

Input: None
Output: Element values

8. Loops

Demonstrate various loop types as supported by the language. The logic that controls them the main loop; show how to exit the loop early (break) or jump to the top again (continue) type logic.

Input: None
Output: Tracing statements

9. Function

Demonstrate (1) declaring a function that takes no parameters and returns no value, (2) declare a function that accepts 1+ parameters and returns no value, (3) a function that returns a value (4) a function that returns "more than one value", (5) default values for parameters 

Input: None
Output: Tracing statements


10. Recursive Functions

Demonstrate the creating a recursive function (don't forget the base case!).

Input: None
Output: Result / execution tracing statements


11. Accepting command-line arguments (no libraries)

Demonstrate how to accept arguments passed to the program from the execution statement.

Input: single or multiple input parameters
Output: Dynamic execution based on input value(s)


12. Accessing Environment & Global Variables

Demonstrate how to access environment and global variables (OS and/or Language).


13. Project / Code Organization

Demonstrate how to organize code within a project with directory structures (best/preferred practices of language and/or industry). How to import code from another part of the project. Basic of access controls and executing code from another file.

Input: Discretionary
Output: Discretionary


14. Import Libraries

Demonstrate ability to include external [public] code libraries. Additional instructions, installations, and/or scripts may be required to demonstrate this in a beginner fashion.


15. Automated API documentation

Demonstrate how to document code so that it is capable of producing automated documentation. If external libraries are needed, import them. If multiple standards exist use the multiple implementation project naming standard.


16. Logging

Demonstrate how to write proper logging statements (not std out). How to write different verbosity levels, set the verbosity for current execution, format the logging statements, and control where the logging statements go.


17. Exception Handling

Demonstrate how to handle exceptions; fail gracefully. How to handle different types of exceptions. Throwing your own exception.


18. Read and Write a File

Demonstrate how to read the contents of a file and write a file out.


19. Accept Command Line args via Library

Demonstrate how to accept command-line arguments that use command line flags (-D for example). Perform using a library if possible; manually if not.


20. Random

Demonstrate how to generate and use random number generator. Random float (0.0 - 1.0), random integer, random within an arbitrary range. Any capability for non-normal distribution.


21. Interactive User IO via STDIN / STDOUT
22. Formatted Output
23. String Manipulation

Demonstrate the ability to find substrings, verify that a string matches a pattern (regex), and convert strings into basic data types (numbers or boolean). Concatenate strings.


24. Advanced String Parsing (YAML, JSON, XML, CSV, properties, BASE64, Hex)
25. Sorting (Manual Implementation)
26. Sorting (Built-in or Library provided)
27. Time
28. Create Simple Custom Object (e.g. Struct)
29. Enumeration type
30. Create Object with behaviors
31. Package Project
32. Object to String
33. Comparing Custom Objects (e.g. sorting and equality)
34. Simple Inheritance
35. Complex Inheritance

Multiple Inheritance. Final classes. Final methods.


36. Automated Testing
37. Reading Configuration File / Resource File
38. Threading
39. Performance Monitoring
40. Aspect Programming
41. Make a database connection
42. Make a HTTP connection
43. Make a HTTP connection with 1-way SSL
44. Make a HTTP connection with 2-way SSL
45. Make a simple UI application
46. Create a REST interface
47. Working with large numbers
48. Symmetric Encryption (via library)
49. Asymmetric Encryption (via library)


